[{"title":"node+express+vue+mongodb实现前后端交互","url":"/2018/05/24/node+express+vue+mongodb%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/","content":"准备用 vue-cli 脚手架生成生\nnpm install -g @vue/cliinit &lt;template&gt; &lt;app-name&gt; 从一个远程模板生成一个项目 (遗留 API, 依赖 `@vue/cli-init`)\n\n关于 vue-cli 的文档可以看这里\n安装脚手架完成后就可以看到一个完整的项目结构了\n后端配置接下来我们需要生辰成一个本地服务器，在根目录下新建一个 server 的文件夹,文件夹里面新建\napi.js(配置项目所需 api)\ndb.js(配置数据库的链接)\nindex.js(服务器入口文件)\n这个三个文件\n\n安装 express，mongoose 模块\nnpm install express mongoose --save\n\n在 db.js 中配置配置 mongodb\n&quot;server/db.js&quot;// 引入mongoose模块const mongoose = require(&quot;mongoose&quot;)// 连接数据库 如果不自己创建 默认生成端口号后面的名字，如这里会生成一个peopleinfo的库mongoose.connect(&quot;mongodb://localhost:27017/peopleinfo&quot;)const db = mongoose.connectiondb.once(&quot;error&quot;, () =&gt; console.log(&quot;Mongo connection error&quot;))db.once(&quot;open&quot;, () =&gt; console.log(&quot;Mongo connection successed&quot;))\n\n在根目录下新建 models 文件夹，在该文件加下新建 peopleinfo.js\n&quot;models/peopleinfo.js&quot;// 引入mongoose模块const mongoose = require(&quot;mongoose&quot;)/************** 定义模式 peopleinfoSchema **************/const peopleinfoSchema = mongoose.Schema(&#123;  name: String,  sex: String,  hobby: String,&#125;)/************** 定义模型 Model **************/const People = mongoose.model(&quot;Peopleinfo&quot;, peopleinfoSchema)module.exports = People\n\n直接用 node 来操作数据库比较繁琐，一般推荐使用’mongoose’这个第三方模块来对数据库进行增删改查，关于 mongoose 中 Schemas，Models 的概念可以在官方网站上阅读\n英文：https://mongoosedoc.top/docs/cnhome.html\n中文：http://mongoosejs.com/\n在 peopleinfo.js 中定义了一个 peopleinfoSchema 的 Model，项目中对人物信息的增删改查我们可以基于这个 People 的 Model 来进行操作。\n接下来编写增删改查的 API，进入 api.js\nserver / api.js;(&quot;use strict&quot;)const db = require(&quot;./db&quot;)const peopleinfomodels = require(&quot;../models/peopleinfo&quot;)const express = require(&quot;express&quot;)const router = express.Router()/************** 创建(create) 读取(get) 更新(update) 删除(delete) **************/// 创建create 人物信息接口router.post(&quot;/api/createinfo&quot;, (req, res) =&gt; &#123;  let newPeopleinfo = new peopleinfomodels(&#123;    name: req.body.name,    sex: req.body.sex,    hobby: req.body.hobby,  &#125;)  // 保存人物信息的方法  newPeopleinfo.save((err, data) =&gt; &#123;    if (err) &#123;      res.send(err)    &#125; else &#123;      res.send(&quot;created successed&quot;)    &#125;  &#125;)&#125;)// 读取get 获取所有人物信息列表router.get(&quot;/api/getallinfo&quot;, (req, res) =&gt; &#123;  // 查找所有人物信息的方法  peopleinfomodels.find((err, data) =&gt; &#123;    if (err) &#123;      res.send(err)    &#125; else &#123;      res.send(data)    &#125;  &#125;)&#125;)// 删除delete 根据id删除对应人物信息router.delete(&quot;/api/deleteByid/:id&quot;, (req, res) =&gt; &#123;  // 查找所有人物信息的方法  peopleinfomodels.findOneAndRemove(    &#123; _id: req.params.id &#125;,    function (err, res) &#123;      if (!err) &#123;      &#125;    &#125;  )  res.sendStatus(200)&#125;)module.exports = router\n\n在这个文件中，首先引入了三个模块，引入 express，使用它的路由功能(express 文档)，还用到了 mongoose 中基于模型操作的一些方法，最后导出路由，在入口文件 index.js 中引入。\nserver / index.jsconst api = require(&quot;./api&quot;)const fs = require(&quot;fs&quot;)const path = require(&quot;path&quot;)const bodyParser = require(&quot;body-parser&quot;)const express = require(&quot;express&quot;)const app = express()app.use(bodyParser.json())app.use(  bodyParser.urlencoded(&#123;    extended: false,  &#125;))app.use(api)app.use(express.static(path.resolve(__dirname, &quot;../dist&quot;)))app.get(&quot;*&quot;, function (req, res) &#123;  const html = fs.readFileSync(    path.resolve(__dirname, &quot;../dist/index.html&quot;),    &quot;utf-8&quot;  )  res.send(html)&#125;)app.listen(8088)console.log(&quot;success listen…………&quot;)\n\n打开更目录下的 package.json 文件，找到”script”这个选项，添加一条命令\n&quot;server&quot;: &quot;node server/index.js&quot;\n\n在终端中执行 ‘npm run server’来启动本地后台。在这之前确保本地已经安装了 MongoDB，并且已经启动。链接数据库成功后终端会有这样的提示：\n\n到这一步，后台的配置算是结束了。\n\n前端配置为了方便页面的架构，推荐使用Element Ui，Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库。在 vue cli 脚手架里面使用 Element，首先要在 main.js 里面引入，\n接下来我们就可以在项目中愉快的使用了，在项目中我们会用一个表格来实现对数据库的增删改查功能，界面可以这样简单的来安排：\n\n添加按钮：实现增\n更新按钮：实现改\n删除按钮：实现删\n详情按钮：实现查\n\n前端的代码可以在项目的/src/pages/home.vue 里查看，表格的属性设置也可以在 element 官网上的组件里查看。有几个注意注意项：\n\n删除单个 item 的时候要给按钮绑定一个 id 属性，根据 id 来删除数据库中的对应数据，id 的值可以用 scope.row(‘_id’)来取\n更新单项数据的时候需要重新复制下原先的数据，使用Object.assign()这个方法。\n项目里我使用了 axios，它是一个基于 Promise 用于浏览器和 nodejs 的 HTTP 客户端。他有以下特点：\n\n\n从浏览器中创建 XMLHttpRequest\n从 node.js 发出 http 请求\n支持 Promise API\n拦截请求和响应\n转换请求和响应数据\n取消请求\n自动转换 JSON 数据\n客户端支持防止 CSRF/XSRF\n\n","categories":["JavaScript"],"tags":["JavaScript","vue"]},{"title":"Browsersync浏览器同步测试工具","url":"/2018/06/04/Browsersync%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%AD%A5%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/","content":"当你在写静态文件的时候，重复刷新浏览器(F5)会感觉非常的繁琐。Browsersync解决了这些不必要的繁琐，它能让浏览器实时响应你对文件的修改并且可以自动为你刷新页面。如果你是一名前端开发者，这个东西我觉得是你的必备品。\n要使用Browsersync，首先确保你的PC上已经安装了node.js和npm。\n第一步：全局安装 Browsersync\nnpm install -g browser-sync\n\n也可以结合gulpjs安装到项目\nnpm install --save-dev browser-sync\n\n第二步：启用 BrowserSync\n进入到你的某个项目目录下，比如有个名为test的项目，我们需要监听该羡慕下的css文件里面的style.css文件\n// --files 路径是相对于运行该命令的项目（目录）browser-sync start --server --files &quot;css/*.css&quot;\n\n这条命令会让Browsersync启动一个小型服务器，并且在终端里会显示一条URL来让你查看你运行的页面。\n如果需要监听多个文件，我们只需要用英文状态下的逗号(“,”)隔开。比如我们还需要监听一个index.html文件可以这样来操作。\n// --files 路径是相对于运行该命令的项目（目录）browser-sync start --server --files &quot;css/*.css, *.html&quot;// 如果你的文件层级比较深，您可以考虑使用 **（表示任意目录）匹配，任意目录下任意.css 或 .html文件。browser-sync start --server --files &quot;**/*.css, **/*.html&quot;\n\nBrowsersync Github\n","categories":["工具"],"tags":["工具"]},{"title":"把数组对象相同的key值合并，并且把对应的id放到一个数组","url":"/2018/06/04/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%90%88%E5%B9%B6/","content":"做项目的时候碰到一个问题，需要把返回数据拼接成不同的 div 列。碰上 vpn 近端时间被封，只能百度了。还不错找到了差不多的解决方法，下面贴一下 js 代码：\nvar old = [  &#123;    id: 1,    name: &quot;css&quot;,    type: &quot;html11&quot;,  &#125;,  &#123;    id: 2,    name: &quot;css&quot;,    type: &quot;html22&quot;,  &#125;,  &#123;    id: 3,    name: &quot;javacript&quot;,    type: &quot;code33&quot;,  &#125;,  &#123;    id: 4,    name: &quot;javacript&quot;,    type: &quot;code44&quot;,  &#125;,  &#123;    id: 5,    name: &quot;php&quot;,    type: &quot;drake&quot;,  &#125;,  &#123;    id: 6,    name: &quot;php&quot;,    type: &quot;brew&quot;,  &#125;,  &#123;    id: 6,    name: &quot;php&quot;,    type: &quot;brewss&quot;,  &#125;,]var hash = &#123;&#125;var i = 0var res = []old.forEach(function (item) &#123;  var name = item.name  if (hash[name]) &#123;    res[hash[name] - 1].id.push(item.id)    res[hash[name] - 1].type.push(item.type)  &#125; else &#123;    hash[name] =      ++i &amp;&amp;      res.push(&#123;        id: [item.id],        name: name,        type: [item.type],      &#125;)  &#125;&#125;)console.log(res)\n\n结合项目要求自己稍微改造了一下，把不同的 type 放入数组。转自segmentfault.com\n原文链接：如何把数组对象相同的 key 值合并，并且把对应的 id 放到一个数组\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"CSS实现表格头部thead固定","url":"/2018/06/18/CSS%E5%AE%9E%E7%8E%B0%E8%A1%A8%E6%A0%BC%E5%A4%B4%E9%83%A8thead%E5%9B%BA%E5%AE%9A/","content":"开发项目中想要实现表格的头部固定，也就是说thead要随着页面滚动永远显示，可以用css或者js方式来实现：\n\ncss 实现方法：\n\nthead &#123; position: -webkit-sticky; position: -moz-sticky; position: -ms-sticky; position: -o-sticky; position: sticky; top: 0; display: table; z-index: 10; width: 100%;&#125;tbody &#123;    display: table;    width: 100%;&#125;\nDEMO：\n  \n\n\n火狐浏览器可能会出现内容和标题错位。\n\njs 实现方法\n\n表头固定js\n","categories":["css"],"tags":["css"]},{"title":"Homebrew命令","url":"/2018/06/18/Homebrew/","content":"Homebrew的使用\n\n安装软件：brew install 软件名，例：brew install wget\n搜索软件：brew search 软件名，例：brew search wget\n卸载软件：brew uninstall 软件名，例：brew uninstall wget\n更新具体软件：brew upgrade 软件名 ，例：brew upgrade git\n显示已安装软件：brew list\n查看软件信息：brew info／home 软件名 ，例：brew info git ／ brew home git ⚠️brew home指令是用浏览器打开官方网页查看软件信息\n查看哪些已安装的程序需要更新： brew outdated\n显示包依赖：brew reps\n\n使用brew安装软件，比如安装git：  \nbrew install git  \n使用brew卸载软件  \nbrew uninstall git  \n使用brew查询软件  \nbrew search /gi*/  /gi*/是个正在表达式。  \nHomebrew 常用命令一览    \nbrew --help #简洁命令帮助    man brew #完整命令帮助      brew install git #安装软件包(这里是示例安装的Git版本控制)  brew uninstall git #卸载软件包  brew search git #搜索软件包  brew list #显示已经安装的所有软件包  brew update #同步远程最新更新情况，对本机已经安装并有更新的软件用*标明  brew outdated #查看已安装的哪些软件包需要更新  brew upgrade git #更新单个软件包  brew info git #查看软件包信息  brew home git #访问软件包官方站  brew cleanup #清理所有已安装软件包的历史老版本  brew cleanup git #清理单个已安装软件包的历史版本  \n","categories":["工具"],"tags":["工具"]},{"title":"学习ES2015/ES2016","url":"/2018/06/21/study-es2015es2016/","content":"// lib/math.jsexport function sum(x, y) &#123;  return x + y;&#125;export var pi = 3.141593;\n\n\n// app.jsimport * as math from &quot;lib/math&quot;;console.log(&quot;2π = &quot; + math.sum(math.pi, math.pi));\n\n\n\n// otherApp.jsimport &#123;sum, pi&#125; from &quot;lib/math&quot;;console.log(&quot;2π = &quot; + sum(pi, pi));\n\n\n还有的功能包括：export default and export *:\n// lib/mathplusplus.jsexport * from &quot;lib/math&quot;;export var e = 2.71828182846;export default function(x) &#123;    return Math.exp(x);&#125;\n\n\n\n// app.jsimport exp, &#123;pi, e&#125; from &quot;lib/mathplusplus&quot;;console.log(&quot;e^π = &quot; + exp(pi));\n\n\n\n数组的扩展find()方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined  \nfilter()方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素  \nevery()方法测试数组的所有元素是否都通过了指定函数的测试 \nsome()方法测试数组中的某些元素是否通过由提供的函数实现的测试 \nreduce()方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值 \n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"项目中常用的js封装","url":"/2018/07/16/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84js%E5%B0%81%E8%A3%85/","content":"/** *判断undefined返回空字符串 */function formatundefined(str) &#123;  if (str == null || str == undefined || str == &quot;undefined&quot;) &#123;    return &quot;&quot;  &#125;  return str&#125;/** * 防抖 * @param fn 方法 * @param delay 时间 * @returns &#123;(function(...[*]): void)|*&#125; * * demo ===&gt;  debounce(fn, 1000) */export const debounce = (fn, delay) =&gt; &#123;  let timer  return function (...args) &#123;    if (timer) &#123;      clearTimeout(timer)    &#125;    timer = setTimeout(() =&gt; &#123;      fn.apply(this, args)    &#125;, delay)  &#125;&#125;/** * 节流 * @param fn  方法 * @param delay  时间 * @returns &#123;(function(...[*]): void)|*&#125; * * demo ===&gt; throttle(fn,1000) */export const throttle = (fn, delay) =&gt; &#123;  let last = 0 // 上次触发时间  return (...args) =&gt; &#123;    const now = Date.now()    if (now - last &gt; delay) &#123;      last = now      fn.apply(this, args)    &#125;  &#125;&#125;/** * 深拷贝 * @param obj * @param cache * @returns &#123;Date|RegExp|any&#125; * * demo ===&gt; * let obj = &#123; name: &#x27;Jack&#x27;, address: &#123; x: 100, y: 200 &#125; &#125;; * deepClone(obj) */export const deepClone = (obj, cache = new WeakMap()) =&gt; &#123;  if (typeof obj !== &quot;object&quot;) return obj // 普通类型，直接返回  if (obj === null) return obj  if (cache.get(obj)) return cache.get(obj) // 防止循环引用，程序进入死循环  if (obj instanceof Date) return new Date(obj)  if (obj instanceof RegExp) return new RegExp(obj)  // 找到所属原型上的constructor，所属原型上的constructor指向当前对象的构造函数  const cloneObj = new obj.constructor()  cache.set(obj, cloneObj) // 缓存拷贝的对象，用于处理循环引用的情况  for (const key in obj) &#123;    if (obj.hasOwnProperty(key)) &#123;      cloneObj[key] = deepClone(obj[key], cache) // 递归拷贝    &#125;  &#125;  return cloneObj&#125;/** * 冒泡排序 * @param arr * @returns &#123;*&#125; * * demo ===&gt; * bubbleSort([3,1,2,5,8,6]) * bubbleSort([&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;e&#x27;,&#x27;d&#x27;]) */export const bubbleSort = (arr) =&gt; &#123;  const len = arr.length  for (let i = 0; i &lt; len - 1; i += 1) &#123;    // 从第一个元素开始，比较相邻的两个元素，前者大就交换位置    for (let j = 0; j &lt; len - 1 - i; j++) &#123;      if (arr[j] &gt; arr[j + 1]) &#123;        const num = arr[j]        arr[j] = arr[j + 1]        arr[j + 1] = num      &#125;    &#125;  &#125;  return arr&#125;/** * 数组去重 * @param arr * @returns &#123;[]&#125; * * demo ===&gt; * resetArr([1,2,2,2,3,4,5,6]) * resetArr([&#x27;b&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;e&#x27;,&#x27;d&#x27;]) */export const resetArr = (arr) =&gt; &#123;  const res = []  arr.forEach((item) =&gt; &#123;    if (res.indexOf(item) === -1) &#123;      res.push(item)    &#125;  &#125;)  return res&#125;/** * 获取URL参数 * @param type URL类型 1:不加密  2:加密 * @returns &#123;&#123;[p: string]: string&#125;&#125; * * demo ===&gt; * https://www.google.com?id=123&amp;age=30 * urlSearchParams(1) // &#123;id: &quot;123&quot;,name: &quot;30&quot;&#125; * * https://www.google.com?user=%E9%98%BF%E9%A3%9E&amp;age=16 * urlSearchParams(2) // &#123;user: &#x27;阿飞&#x27;, age: &#x27;16&#x27;&#125; */export const urlSearchParams = (type = 1) =&gt; &#123;  if (type === 1) &#123;    // 创建一个URLSearchParams实例    const urlSearchParams = new URLSearchParams(window.location.search)    // 把键值对列表转换为一个对象    return Object.fromEntries(urlSearchParams.entries())  &#125;  const res = &#123;&#125;,    url = window.location.href  if (url.includes(&quot;?&quot;)) &#123;    const str = url.split(&quot;?&quot;)[1],      arr = str.split(&quot;&amp;&quot;)    arr.forEach((item) =&gt; &#123;      const key = item.split(&quot;=&quot;)[0],        val = item.split(&quot;=&quot;)[1]      res[key] = decodeURIComponent(val) // 解码    &#125;)  &#125;  return res&#125;/** * 判断字符串是以什么结尾 * @param str   abc123 * @param target  123 * @returns &#123;boolean&#125; */export const confirmEnding = (str, target) =&gt; &#123;  // 请把你的代码写在这里  var start = str.length - target.length  var arr = str.substr(start, target.length)  if (arr === target) &#123;    return true  &#125;  return false&#125;/** * 随机数范围 * @param min * @param max * @returns &#123;null|number&#125; */export const random = (min, max) =&gt; &#123;  if (arguments.length === 1) &#123;    return Math.floor(min + Math.random() * (max + 1 - min))  &#125; else &#123;    return null  &#125;&#125;/** * 四舍五入 * @param n         数 * @param decimals  小数点后第几位 * @returns &#123;number&#125; */export const round = (n, decimals = 0) =&gt; &#123;  return Number(`$&#123;Math.round(`$&#123;n&#125;e$&#123;decimals&#125;`)&#125;e-$&#123;decimals&#125;`)&#125;/** * 通过key来获取html?后面的数据 * */function getUrlParam(key) &#123;  var url = decodeURI(location.search.replace(/^\\?/, &quot;&quot;)).split(&quot;&amp;&quot;)  var paramsObj = &#123;&#125;  for (var i = 0, iLen = url.length; i &lt; iLen; i++) &#123;    var param = url[i].split(&quot;=&quot;)    paramsObj[param[0]] = param[1]  &#125;  if (key) &#123;    return paramsObj[key] || &quot;&quot;  &#125;  return paramsObj&#125;/** * 判断数据类型 */var toString = Object.prototype.toStringfunction type(elem) &#123;  if (elem == null) &#123;    return elem + &quot;&quot;  &#125;  return toString    .call(elem)    .replace(/[\\[\\]]/g, &quot;&quot;)    .split(&quot; &quot;)[1]    .toLowerCase()&#125;/** * 判断数组是否包含元素 * @param arr * @param obj * @returns &#123;Boolean&#125; */function contains(arr, obj) &#123;  var i = arr.length  while (i--) &#123;    if (arr[i] == obj) &#123;      return true    &#125;  &#125;  return false&#125;/** * 移除数组里的元素 * @param arr * @param obj * @returns &#123;Array&#125; */function remove(arr, obj) &#123;  var i = arr.length  var newarr = new Array()  while (i--) &#123;    if (arr[i] != obj) &#123;      newarr.push(arr[i])    &#125;  &#125;  return newarr&#125;/** * 原生拖拽 */function dragEvent(drag, dbody) &#123;  window.getSelection    ? window.getSelection().removeAllRanges()    : document.selection.empty()  drag.onmousedown = function (event) &#123;    var event = event || window.event    var pageX =      event.pageX || event.clientX + document.documentElement.scrollLeft    var pageY =      event.pageY || event.clientY + document.documentElement.scrollTop    var bodyX = pageX - dbody.offsetLeft    var bodyY = pageY - dbody.offsetTop    window.getSelection      ? window.getSelection().removeAllRanges()      : document.selection.empty()    document.onmousemove = function (event) &#123;      var event = event || window.event      var pageX =        event.pageX || event.clientX + document.documentElement.scrollLeft      var pageY =        event.pageY || event.clientY + document.documentElement.scrollTop      dbody.style.left = pageX - bodyX + &quot;px&quot;      dbody.style.top = pageY - bodyY + &quot;px&quot;      window.getSelection        ? window.getSelection().removeAllRanges()        : document.selection.empty()    &#125;  &#125;  document.onmouseup = function () &#123;    document.onmousemove = null  &#125;&#125;/** * 往数组里面增加属性 * @param array * @param dataType */function addDataType(array, dataType) &#123;  for (var i in array) &#123;    array[i].type = dataType  &#125;&#125;/** * 获取当前日期时间 格式&quot;yyyy-MM-dd HH:MM:SS&quot; */function getNowFormatDate() &#123;  var date = new Date()  var seperator1 = &quot;-&quot;  var seperator2 = &quot;:&quot;  var month = date.getMonth() + 1  var strDate = date.getDate()  if (month &gt;= 1 &amp;&amp; month &lt;= 9) &#123;    month = &quot;0&quot; + month  &#125;  if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) &#123;    strDate = &quot;0&quot; + strDate  &#125;  var currentdata =    date.getFullYear() +    seperator1 +    month +    seperator1 +    strDate +    &quot; &quot; +    date.getHours() +    seperator2 +    date.getMinutes() +    seperator2 +    date.getSeconds()  return currentdata&#125;/** * 获取当前日期前一个月时间 格式&quot;yyyy-MM-dd HH:MM:SS&quot; */function getLastFormatDate() &#123;  var date = new Date()  date.setMonth(date.getMonth() - 1)  var seperator1 = &quot;-&quot;  var seperator2 = &quot;:&quot;  var year = date.getFullYear()  var month = date.getMonth() + 1  var strDate = date.getDate()  var hours = date.getHours()  var seconds = date.getSeconds()  var minutes = date.getMinutes()  if (month &gt;= 1 &amp;&amp; month &lt;= 9) &#123;    month = &quot;0&quot; + month  &#125;  if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) &#123;    strDate = &quot;0&quot; + strDate  &#125;  if (hours &gt;= 0 &amp;&amp; hours &lt;= 9) &#123;    hours = &quot;0&quot; + hours  &#125;  if (seconds &gt;= 0 &amp;&amp; seconds &lt;= 9) &#123;    seconds = &quot;0&quot; + seconds  &#125;  if (minutes &gt;= 0 &amp;&amp; minutes &lt;= 9) &#123;    minutes = &quot;0&quot; + minutes  &#125;  var lastdata =    year +    seperator1 +    month +    seperator1 +    strDate +    &quot; &quot; +    hours +    seperator2 +    minutes +    seperator2 +    seconds  return lastdata&#125;/** * 随机生产6位数的数字 */function getUUidNum() &#123;  var code = Math.floor(Math.random() * 900000) + 100000  return code&#125;/** * 获取当天日期，获取前n天的日期 */function getCurrentDate() &#123;  var d = new Date()  var year = d.getFullYear()  var mon = d.getMonth() + 1  var day = d.getDate()  s =    year +    &quot;-&quot; +    (mon &lt; 10 ? &quot;0&quot; + mon : mon) +    &quot;-&quot; +    (day &lt; 10 ? &quot;0&quot; + day : day)  return s&#125;/** * 获取前n天的日期 */function getBeforeDate(n) &#123;  var n = n  var d = new Date()  var year = d.getFullYear()  var mon = d.getMonth() + 1  var day = d.getDate()  if (day &lt;= n) &#123;    if (mon &gt; 1) &#123;      mon = mon - 1    &#125; else &#123;      year = year - 1      mon = 12    &#125;  &#125;  d.setDate(d.getDate() - n)  year = d.getFullYear()  mon = d.getMonth() + 1  day = d.getDate()  s =    year +    &quot;-&quot; +    (mon &lt; 10 ? &quot;0&quot; + mon : mon) +    &quot;-&quot; +    (day &lt; 10 ? &quot;0&quot; + day : day)  return s&#125;\n","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"Markdown 语法及渲染","url":"/2018/08/11/Markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%B8%B2%E6%9F%93/","content":"说明Jekyll 默认使用 kramdown 来渲染 markdown 类型文件，在 Minimalism 主题中也是使用其默认配置，但在其渲染的基础上自定义了自己的样式，主要参考了 GitHub 的渲染风格。\nMarkdown 基本语法:stuck_out_tongue: 可能 Markdown 的基本语法大家都很熟悉了，这里主要还是想展示一下主题对各种格式的渲染效果，况且日常写作中，通常也不会全用得上。\n1. 斜体和粗体使用 * 和 ** 表示斜体和粗体。\n示例：\n这是 *斜体*，这是 **粗体**。\n\n效果：\n这是 斜体，这是 粗体。\n2. 分级标题标题分 6 级，在行首加 # 以表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4，常用的标题主要就是 1 ~ 3 级，往后标题基本同加粗的效果差不多了。\n示例：\n# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题\n\n效果：\n一级标题二级标题三级标题四级标题五级标题六级标题3. 外链接使用 [描述](链接地址) 为文章增加外链接。\n示例：\n这是去往 [主题 Minimalism](https://github.com/showzeng/minimalism) 的链接。\n\n效果：\n这是去往 主题 Minimalism 的链接。\n也可在链接地址后加一个标题，直观效果时鼠标悬停时的文本提示，其语法是链接后加空格和标题文本。\n示例：\n这是去往 [主题 Minimalism](https://github.com/showzeng/minimalism &quot;Minimalism&quot;) 的链接。\n\n效果 (鼠标悬停在链接上时触发)：\n这是去往 主题 Minimalism 的链接。\n同时外链接还有另一种使用方式，一般是在文末放置链接标注，在文中就直接使用标注。\n示例：\n文末放置 Minimalism 的链接标注：[Minimalism]: https://github.com/showzeng/minimalism文章中直接使用标注替代链接：这是我开发的一个新主题 [Minimalism]。\n\n效果：\n这是我开发的一个新主题 Minimalism。\n此外，在使用链接标注时，可以替换需要显示的链接文本。\n示例：\n文末放置 Minimalism 的链接标注：[Minimalism]: https://github.com/showzeng/minimalism文章中直接使用标注替代链接：这是我开发的一个新主题 [Minimalism Theme][Minimalism]。\n\n效果：\n这是我开发的一个新主题 Minimalism Theme。\n4. 无序列表使用 * / - / + 表示无序列表。\n示例：\n* 无序列表项 一* 无序列表项 二* 无序列表项 三\n\n效果：\n\n无序列表项 一\n无序列表项 二\n无序列表项 三\n\n5. 有序列表使用数字和点表示有序列表。\n示例：\n1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三\n\n效果：\n\n有序列表项 一\n有序列表项 二\n有序列表项 三\n\n6. 引用使用 &gt; 表示引用。\n示例：\n&gt; Less is more. —— 「Andrea del Sarto」\n\n效果：\n\nLess is more. —— 「Andrea del Sarto」\n\n当然，引用也可以嵌套使用。\n示例：\n&gt; Less is more. —— 「Andrea del Sarto」&gt;&gt; 万物之始，大道至简，衍化至繁。 —— 『道德经』\n\n效果：\n\nLess is more. —— 「Andrea del Sarto」\n\n万物之始，大道至简，衍化至繁。 —— 『道德经』\n\n\n7. 行内代码块使用 `代码` 表示行内代码块。\n示例：\n让主题 `Minimalism` 成为行内代码块。\n\n效果：\n让主题 Minimalism 成为行内代码块。\n8. 代码块使用四个缩进空格表示代码块。\n示例：\n这是一个代码块，此行左侧有四个不可见的空格。\n\n效果：\n这是一个代码块，此行左侧有四个不可见的空格。\n\n需要指出的是，我并不喜欢和推荐用这种格式来书写，其实这个代码块在主题中就是没有指定代码类型默认的代码块样式 (而指定代码类型使用的是 Prism 官网定制的代码渲染主题，你也可以制作你自己的代码渲染主题并替换博客主题的代码渲染主题，具体请参考博客主题定制文章。)，所以，当你想实现一个代码块效果时，推荐如下用法。\n示例：\n\n  \n  这是一个代码块。\n\n  指定代码类型的代码块。\n\n  public class HelloWorld &#123;    public static void main(String[] args) &#123;        // Prints &quot;Hello, World&quot; to the terminal window.        System.out.println(&quot;Hello, World&quot;);    &#125;&#125;\n  \n\n\n效果：\n这是一个代码块。\n\n指定代码类型的代码块。\n\npublic class HelloWorld &#123;    public static void main(String[] args) &#123;        // Prints &quot;Hello, World&quot; to the terminal window.        System.out.println(&quot;Hello, World&quot;);    &#125;&#125;\n\n9. 插入图像使用 ![描述](图片链接地址) 插入图像。\n示例：\n![头像](https://www.z4a.net/images/2017/08/31/shortcut_icon.png)\n\n效果：\n\n同外链接，图片也可在链接地址后加一个标题，直观效果时鼠标悬停时的文本提示，其语法是链接后加空格和标题文本。\n示例：\n![头像](https://www.z4a.net/images/2017/08/31/shortcut_icon.png &quot;头像&quot;)\n\n效果 (鼠标悬停在头像上时触发)：\n\n10. 分隔符使用 --- 可显示分隔符。\n示例：\n---\n\n效果：\n\n11. 反转义使用 \\ 可使 Markdown 解析时不会去解析本该属于语法部分的一些符号。\n示例：\n\\`代码块\\`\n\n效果：\n`代码块`\n12. Emoji主题同样也支持 Emoji 表情，使用方法很简单。\n示例：\n(Smile) :smile: (Sob) :sob:\n\n效果：\n(Smile) :smile: (Sob) :sob:\nEmoji 的代码参考 Emoji sheet。\n13. 段内换行在同一段落里让文本换行，只需在上一行末尾加 2 个空格即可。\n示例：\n这是这个段落的第一行。  这是同一个段落的第二行。\n\n效果：\n这是这个段落的第一行。这是同一个段落的第二行。\nMarkdown 高阶语法1. 删除线使用 ~~ 表示删除线。\n示例：\n~~这是一段错误的文本。~~\n\n效果：\n这是一段错误的文本。\n2. 注脚使用 [^keyword] 表示注脚。\n示例：\n这是第一个注脚 [^footnote1] 的样例。这是第二个注脚 [^footnote2] 的样例。对应在文章末尾放置如下，点击效果中的注脚即可跳转至文章末尾的注脚注解。[^footnote1]: 这是第一个注脚的注解。[^footnote2]: 这是第二个注脚的注解。\n\n效果：\n这是第一个注脚 ^footnote1 的样例。\n这是第二个注脚 ^footnote2 的样例。\n3. 加强的代码块使用 Prism 官网定制的代码高亮主题，选择了所有支持的编程语言，你可以定制你自己的语法主题。\n非代码示例：\n\n\n$ sudo pacman -S oh-my-zsh-git\n\n\n\n效果：\n$ sudo pacman -S oh-my-zsh-git\n\nPython 示例：\n\n\n@requires_authorizationdef somefunc(param1=&#x27;&#x27;, param2=0):    &#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;    if param1 &gt; param2: # interesting        print &#x27;Greater&#x27;    return (param2 - param1 + 1) or Noneclass SomeClass:    pass&gt;&gt;&gt; message = &#x27;&#x27;&#x27;interpreter... prompt&#x27;&#x27;&#x27;\n\n\n\n效果：\n@requires_authorizationdef somefunc(param1=&#x27;&#x27;, param2=0):    &#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;    if param1 &gt; param2: # interesting        print &#x27;Greater&#x27;    return (param2 - param1 + 1) or Noneclass SomeClass:    pass&gt;&gt;&gt; message = &#x27;&#x27;&#x27;interpreter... prompt&#x27;&#x27;&#x27;\n\nJavaScript 示例：\n\n\n/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123;  var a = 1, b = 1;  var tmp;  while (--n &gt;= 0) &#123;    tmp = a;    a += b;    b = tmp;  &#125;  return a;&#125;document.write(fib(10));\n\n\n\n效果：\n/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123;  var a = 1, b = 1;  var tmp;  while (--n &gt;= 0) &#123;    tmp = a;    a += b;    b = tmp;  &#125;  return a;&#125;document.write(fib(10));\n\n4. 表格支持示例：\n| 项目 | 价格 | 数量 || -- | -- | -- || 计算机 | \\$1600 | 5 || 手机 | \\$12 | 12 || 管线 | \\$1 | 234 |\n\n效果：\n\n\n\n项目\n价格\n数量\n\n\n\n计算机\n$1600\n5\n\n\n手机\n$12\n12\n\n\n管线\n$1\n234\n\n\n表格中的项默认都是左对齐，使用 :--: 和 --: 可设置居中和右对齐。\n示例：\n| 项目 | 价格 | 数量 || -- | :--: | --: || 计算机 | \\$1600 | 5 || 手机 | \\$12 | 12 || 管线 | \\$1 | 234 |\n\n效果：\n\n\n\n项目\n价格\n数量\n\n\n\n计算机\n$1600\n5\n\n\n手机\n$12\n12\n\n\n管线\n$1\n234\n\n\n5. 定义型列表示例：\n名词 1: 定义 1（左侧有一个可见的冒号和空格）名词 2: 定义 2（左侧有一个可见的冒号和空格）\n\n效果：\n名词 1定义 1（左侧有一个可见的冒号和空格）名词 2定义 2（左侧有一个可见的冒号和空格）6. Html 标签可在 Markdown 语法中直接嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：\n示例：\n&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;\n\n效果：\n\n    \n        值班人员\n        星期一\n        星期二\n        星期三\n    \n    \n        李强\n        张明\n        王平\n    \n\n\n7. 待办事项 Todo 列表使用带有 [ ] 或 [x] (未完成或已完成) 项的列表语法撰写一个待办事项列表，并且支持子列表嵌套以及混用Markdown语法。\n示例：\n- [x] **博客改版**    - [x] 响应式布局，移动端适配    - [ ] 多语言支持    - [x] 主页    - [x] 文章列表页    - [x] 归档页    - [x] 关于页    - [x] 文章详情页        - [x] 排版        - [x] Markdown 渲染        - [x] 代码高亮，使用 [Prism](https://prismjs.com/)        - [ ] Toc 功能        - [x] 评论功能        - [x] 打赏功能- [x] **Minimalism 主题发布**    - [x] 主题编写    - [x] 打包发布\n\n效果：\n\n博客改版\n\n 响应式布局，移动端适配\n 多语言支持\n 主页\n 文章列表页\n 归档页\n 关于页\n 文章详情页\n 排版\n Markdown 渲染\n 代码高亮，使用 Prism\n Toc 功能\n 评论功能\n 打赏功能\n\n\n\n\nMinimalism 主题发布\n\n 主题编写\n 打包发布\n\n\n\n写在最后本篇博客列举的语法模板部分参考了 Cmd Markdown 编辑阅读器的语法说明 :+1:，感谢。\n\n","categories":["Markdown"],"tags":["Markdown"]},{"title":"macOs homebrew更新MongoDB到4.0报错","url":"/2018/08/26/macOs%20homebrew%E6%9B%B4%E6%96%B0MongoDB%E5%88%B04.0%E6%8A%A5%E9%94%99/","content":"macOS使用homebrew更新MongoDB到4.0后启动MongoDB会有一个报错 \nThe data files need to be fully upgraded to version 3.6 before attempting an upgrade to 4.0; see http://dochub.mongodb.org/core/4.0-upgrade-fcv for more details\n\n解决方案一：打开终端，进入到data/db目录，使用命令rm -rf *（每当使用该命令时请谨慎小心，不可逆，不可逆，不可逆，重要的事情说三遍），删除db目录下的所有文件，然后重亲启动MongoDB。\n解决方案二：重新下载一个3.6的MongoDB，降级！！！:smile:\n","categories":["工具"],"tags":["工具"]},{"title":"使用Vue.js时的爬坑小结","url":"/2018/09/29/%E4%BD%BF%E7%94%A8Vue.js%E6%97%B6%E7%9A%84%E7%88%AC%E5%9D%91%E5%B0%8F%E7%BB%93/","content":"Vue 封装 axios 后，this 的指向问题项目中使用了 axios 来发送请求，自己也根据需求做了统一封装，在做测试的时候发现了一点点小问题，比如下面这段代码（修改前）：\ndeleteCurrent: function (id) &#123;      let r = confirm(&#x27;确认删除？&#x27;)    if(r == true)&#123;        this.getRequest(`/api/user/xxxx.do?usercode=$&#123;id&#125;&amp;deleteusercode=$&#123;getStore(&#x27;info&#x27;).usercode&#125;`)            .then(function (res) &#123;                this.getRequest(`/api/user/xxxxx.do?deptcode=$&#123;value&#125;`)                    .then(function (responsive) &#123;                        this.users = responsive.data                    &#125;)                    .catch(function (err) &#123;                        console.log(err)                    &#125;)            &#125;)            .catch(function (err) &#123;                console.log(err)            &#125;)    &#125;else &#123;        return false    &#125;&#125;\n\n删除某个人员后，需要重新刷新下列表，也就是第一个回调函数执行成功后需要再一次请求列表接口，结果发现执行完第一个回调之后就没有然后了，打印了下 this 结果是 undefined。针对这个现象有 2 种解决办法（修改后）：\n方法一：使用ES6箭头函数”=&gt;”deleteCurrent: function (id) &#123;  //删除    let r = confirm(&#x27;确认删除？&#x27;)    if(r == true)&#123;        this.getRequest(`/api/user/xxxxx.do?usercode=$&#123;id&#125;&amp;deleteusercode=$&#123;getStore(&#x27;info&#x27;).usercode&#125;`)            .then( (res) =&gt; &#123;                this.getRequest(`/api/user/getUsersByDeptcode.do?deptcode=$&#123;value&#125;`)                    .then( (responsive) =&gt; &#123;                        this.users = responsive.data                    &#125;)                    .catch( (err) =&gt; &#123;                        console.log(err)                    &#125;)            &#125;)            .catch( (err) =&gt; &#123;                console.log(err)            &#125;)    &#125;else &#123;        return false    &#125;&#125;\n\n在 ES6 中，箭头函数内部的this是词法作用域，由上下文来决定，在这里也就是指的 vue 本身。\n方法二：hack写法 const that = thisdeleteCurrent: function (id) &#123;  //删除警员信息    let r = confirm(&#x27;确认删除？&#x27;)    const that = this    if(r == true)&#123;        this.getRequest(`/api/user/xxxx.do?usercode=$&#123;id&#125;&amp;deleteusercode=$&#123;getStore(&#x27;info&#x27;).usercode&#125;`)            .then(function (res) &#123;                that.getRequest(`/api/user/xxxxx.do?deptcode=$&#123;value&#125;`)                    .then(function (responsive) &#123;                        that.users = responsive.data                    &#125;)                    .catch(function (err) &#123;                        console.log(err)                    &#125;)            &#125;)            .catch(function (err) &#123;                console.log(err)            &#125;)    &#125;else &#123;        return false    &#125;&#125;\n\n如果熟练运用箭头函数以前的 hack 写法就没什么用的必要了，当然习惯问题还是根据自己来决定。\n","categories":["vue"],"tags":["vue"]},{"title":"Docker常用命令","url":"/2018/10/18/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"\n根据搜索的文献，官网的文档，列举了使用docker时常用的一些命令\n\n查看docker基本信息docker --version                #查看版本docker-compose --version        #查看版本docker-machine --version        #查看版本docker version                  #查看client和server端版本，并可以查看是否开启体验功能docker info                     #显示docker系统的信息docker logs                     #日志信息service docker status           #故障检查sudo service docker start|stop  #启动关闭docker\n\n检查docker ps                            #查看当前正在运行的image实例docker ps -a                         #查看所有镜像实例docker run hello-world               #验证docker是否在运行中docker inspect &lt;task or container&gt;   #检查任务或容器\n\n镜像(image)操作docker build -t &lt;image-name&gt; .                      #使用当前目录下的Dockerfile构建镜像docker images                                       #查看镜像docker image ls -a                                  #显示机器上所有的镜像docker image rm &lt;image id&gt;                          #删除指定的镜像docker image rm $(docker image ls -a -q)            #删除所有的镜像docker rmi [image-id/image-name]                    #删除指定的镜像，如docker rmi nginxdocker tag &lt;image&gt; &lt;username&gt;/&lt;repository&gt;:&lt;tag&gt;    #为自定义的镜像打上tag。如：$docker tag hellopython followtry/demo:latestdocker push &lt;username&gt;/&lt;repository&gt;:&lt;tag&gt;           #将自定义的镜像发布到仓库。如：docker push followtry/demo:latest    上传后访问地址：https://cloud.docker.com/swarm/followtry/repository/docker/followtry/demo/generaldocker pull &lt;username&gt;/&lt;repository&gt;                 #pull自定义的上传上去的镜像。如：$docker pull followtry/demodocker run username/repository:tag                  #运行仓库的镜像\n\n容器(container)操作docker container ls                                #列出所有运行中的容器docker container ls -a                             #列出所有容器，包括未运行的docker container ls -q                              #只列出运行的容器的id集合docker container stop &lt;hash&gt;                       #优雅停用指定的容器docker container kill &lt;hash&gt;                       #强制关闭指定的容器docker container rm &lt;hash&gt;                         #删除指定的容器docker container rm $(docker container ls -a -q)   #删除所有的容器docker run -d -p 8080:80 --name webserver nginx    #运行nginx镜像实例，-d：后台，-p:绑定端口8080到docker的80docker stop &lt;containerid/container-name&gt;           #停止容器webserverdocker start &lt;containerid/container-name&gt;          #启动容器webserverdocker port &lt;containerid/container-name&gt;           #查看指定容器的端口映射docker logs -f &lt;containerid/container-name&gt;        #查看指定容器的日志docker top &lt;containerid/container-name&gt;            #查看容器的进程docker inspect &lt;containerid/container-name&gt;        #检查容器的底层信息docker rm &lt;hash&gt;                                   #从此机器中删除指定的容器docker rm $(docker ps -a -q)                       #从此机器中删除所有容器docker kill &lt;hash&gt;                                 #强制关闭指定的容器\n参考文献 https://docs.docker-cn.com/参考文献 Docker常用命令\n","categories":["工具"],"tags":["工具"]},{"title":"Git飞行规则(Flight Rules)","url":"/2019/01/11/Git%E9%A3%9E%E8%A1%8C%E8%A7%84%E5%88%99(Flight%20Rules)/","content":"\n\n\nTable of Contents  generated with DocToc\n\n编辑提交(editting commits)\n我刚才提交了什么?\n我的提交信息(commit message)写错了\n我提交(commit)里的用户名和邮箱不对\n我想从一个提交(commit)里移除一个文件\n我想删除我的的最后一次提交(commit)\n删除任意提交(commit)\n我尝试推一个修正后的提交(amended commit)到远程，但是报错：\n我意外的做了一次硬重置(hard reset)，我想找回我的内容\n\n\n暂存(Staging)\n我需要把暂存的内容添加到上一次的提交(commit)\n我想要暂存一个新文件的一部分，而不是这个文件的全部\n我想把在一个文件里的变化(changes)加到两个提交(commit)里\n我想把暂存的内容变成未暂存，把未暂存的内容暂存起来\n\n\n未暂存(Unstaged)的内容\n我想把未暂存的内容移动到一个新分支\n我想把未暂存的内容移动到另一个已存在的分支\n我想丢弃本地未提交的变化(uncommitted changes)\n我想丢弃某些未暂存的内容\n\n\n分支(Branches)\n我从错误的分支拉取了内容，或把内容拉取到了错误的分支\n我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致\n我需要提交到一个新分支，但错误的提交到了master\n我想保留来自另外一个ref-ish的整个文件\n我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里\n我想删除上游(upstream)分支被删除了的本地分支\n我不小心删除了我的分支\n我想删除一个分支\n我想从别人正在工作的远程分支签出(checkout)一个分支\n\n\nRebasing 和合并(Merging)\n我想撤销rebase/merge\n我已经rebase过, 但是我不想强推(force push)\n我需要组合(combine)几个提交(commit)\n安全合并(merging)策略\n我需要将一个分支合并成一个提交(commit)\n我只想组合(combine)未推的提交(unpushed commit)\n\n\n检查是否分支上的所有提交(commit)都合并(merge)过了\n交互式rebase(interactive rebase)可能出现的问题\n这个rebase 编辑屏幕出现’noop’\n有冲突的情况\n\n\n\n\n杂项(Miscellaneous Objects)\n克隆所有子模块\n删除标签(tag)\n恢复已删除标签(tag)\n已删除补丁(patch)\n\n\n跟踪文件(Tracking Files)\n我只想改变一个文件名字的大小写，而不修改内容\n我想从Git删除一个文件，但保留该文件\n\n\n配置(Configuration)\n我想给一些Git命令添加别名(alias)\n我想缓存一个仓库(repository)的用户名和密码\n\n\n我不知道我做错了些什么\n其它资源(Other Resources)\n书(Books)\n教程(Tutorials)\n脚本和工具(Scripts and Tools)\nGUI客户端(GUI Clients)\n\n\n\n\n\n编辑提交(editting commits)\n我刚才提交了什么?如果你用 git commit -a 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。 你就可以用下面的命令显示当前HEAD上的最近一次的提交(commit):\n(master)$ git show\n\n或者\n$ git log -n1 -p\n\n\n我的提交信息(commit message)写错了如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):\n$ git commit --amend --only\n这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:\n$ git commit --amend --only -m &#x27;xxxxxxx&#x27;\n\n如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。\n\n我提交(commit)里的用户名和邮箱不对如果这只是单个提交(commit)，修改它：\n$ git commit --amend --author &quot;New Authorname &lt;authoremail@mydomain.com&gt;&quot;\n\n如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.\n\n我想从一个提交(commit)里移除一个文件通过下面的方法，从一个提交(commit)里移除一个文件:\n$ git checkout HEAD^ myfile$ git add -A$ git commit --amend\n\n这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。\n\n我想删除我的的最后一次提交(commit)如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。\n$ git reset HEAD^ --hard$ git push -f [remote] [branch]\n\n如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):\n(my-branch*)$ git reset --soft HEAD@&#123;1&#125;\n\n这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 git revert SHAofBadCommit， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)； 或者, 如果你推的这个分支是rebase-safe的 (例如： 其它开发者不会从这个分支拉), 只需要使用 git push -f； 更多, 请参考 the above section。\n\n删除任意提交(commit)同样的警告：不到万不得已的时候不要这么做.\n$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT$ git push -f [remote] [branch]\n\n或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。\n\n我尝试推一个修正后的提交(amended commit)到远程，但是报错：To https://github.com/yourusername/repo.git! [rejected]        mybranch -&gt; mybranch (non-fast-forward)error: failed to push some refs to &#x27;https://github.com/tanay1337/webmaker.org.git&#x27;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: &#x27;git pull ...&#x27;) before pushing again.hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.\n\n注意, rebasing(见下面)和修正(amending)会用一个新的提交(commit)代替旧的, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (-f)。 注意 &ndash; 总是 确保你指明一个分支!\n(my-branch)$ git push origin mybranch -f\n\n一般来说, 要避免强推. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。\n\n我意外的做了一次硬重置(hard reset)，我想找回我的内容如果你意外的做了 git reset --hard, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。\n(master)$ git reflog\n\n你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。 选择你想要回到的提交(commit)的SHA，再重置一次:\n(master)$ git reset --hard SHA1234\n\n这样就完成了。\n暂存(Staging)\n我需要把暂存的内容添加到上一次的提交(commit)(my-branch*)$ git commit --amend\n\n\n我想要暂存一个新文件的一部分，而不是这个文件的全部一般来说, 如果你想暂存一个文件的一部分, 你可这样做:\n$ git add --patch filename.x\n\n-p 简写。这会打开交互模式， 你将能够用 s 选项来分隔提交(commit)； 然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:\n$ git add -N filename.x\n\n然后, 你需要用 e 选项来手动选择需要添加的行，执行 git diff --cached 将会显示哪些行暂存了哪些行只是保存在本地了。\n\n我想把在一个文件里的变化(changes)加到两个提交(commit)里git add 会把整个文件加入到一个提交. git add -p 允许交互式的选择你想要提交的部分.\n\n我想把暂存的内容变成未暂存，把未暂存的内容暂存起来这个有点困难， 我能想到的最好的方法是先stash未暂存的内容， 然后重置(reset)，再pop第一步stashed的内容, 最后再add它们。\n$ git stash -k$ git reset --hard$ git stash pop$ git add -A\n\n未暂存(Unstaged)的内容\n我想把未暂存的内容移动到一个新分支$ git checkout -b my-branch\n\n\n我想把未暂存的内容移动到另一个已存在的分支$ git stash$ git checkout my-branch$ git stash pop\n\n\n我想丢弃本地未提交的变化(uncommitted changes)如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：\n# one commit(my-branch)$ git reset --hard HEAD^# two commits(my-branch)$ git reset --hard HEAD^^# four commits(my-branch)$ git reset --hard HEAD~4# or(master)$ git checkout -f\n\n重置某个特殊的文件, 你可以用文件名做为参数:\n$ git reset filename\n\n\n我想丢弃某些未暂存的内容如果你想丢弃工作拷贝中的一部分内容，而不是全部。\n签出(checkout)不需要的内容，保留需要的。\n$ git checkout -p# Answer y to all of the snippets you want to drop\n\n另外一个方法是使用 stash， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。\n$ git stash -p# Select all of the snippets you want to save$ git reset --hard$ git stash pop\n\n或者, stash 你不需要的部分, 然后stash drop。\n$ git stash -p# Select all of the snippets you don&#x27;t want to save$ git stash drop\n\n分支(Branches)\n我从错误的分支拉取了内容，或把内容拉取到了错误的分支这是另外一种使用 git reflog 情况，找到在这次错误拉(pull) 之前HEAD的指向。\n(master)$ git reflogab7555f HEAD@&#123;0&#125;: pull origin wrong-branch: Fast-forwardc5bc55a HEAD@&#123;1&#125;: checkout: checkout message goes here\n\n重置分支到你所需的提交(desired commit):\n$ git reset --hard c5bc55a\n\n完成。\n\n我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致先确认你没有推(push)你的内容到远程。\ngit status 会显示你领先(ahead)源(origin)多少个提交:\n(my-branch)$ git status# On branch my-branch# Your branch is ahead of &#x27;origin/my-branch&#x27; by 2 commits.#   (use &quot;git push&quot; to publish your local commits)#\n\n一种方法是:\n(master)$ git reset --hard origin/my-branch\n\n\n我需要提交到一个新分支，但错误的提交到了master在master下创建一个新分支，不切换到新分支,仍在master下:\n(master)$ git branch my-branch\n\n把master分支重置到前一个提交:\n(master)$ git reset --hard HEAD^\n\nHEAD^ 是 HEAD^1 的简写，你可以通过指定要设置的HEAD来进一步重置。\n或者, 如果你不想使用 HEAD^, 找到你想重置到的提交(commit)的hash(git log 能够完成)， 然后重置到这个hash。 使用git push 同步内容到远程。\n例如, master分支想重置到的提交的hash为a13b85e:\n(master)$ git reset --hard a13b85eHEAD is now at a13b85e\n\n签出(checkout)刚才新建的分支继续工作:\n(master)$ git checkout my-branch\n\n\n我想保留来自另外一个ref-ish的整个文件假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:\n(solution)$ git add -A &amp;&amp; git commit -m &quot;Adding all changes from this spike into one big commit.&quot;\n\n当你想要把它放到一个分支里 (可能是feature, 或者 develop), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。\n假设你有:\n\n分支 solution, 拥有原型方案， 领先 develop 分支。\n分支 develop, 在这里你应用原型方案的一些内容。\n\n我去可以通过把内容拿到你的分支里，来解决这个问题:\n(develop)$ git checkout solution -- file1.txt\n\n这会把这个文件内容从分支 solution 拿到分支 develop 里来:\n# On branch develop# Your branch is up-to-date with &#x27;origin/develop&#x27;.# Changes to be committed:#  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)##        modified:   file1.txt\n\n然后, 正常提交。\nNote: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem. ~ Wikipedia.\n\n我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里假设你有一个master分支， 执行git log, 你看到你做过两次提交:\n(master)$ git logcommit e3851e817c451cc36f2e6f3049db528415e3c114Author: Alex Lee &lt;alexlee@example.com&gt;Date:   Tue Jul 22 15:39:27 2014 -0400    Bug #21 - Added CSRF protectioncommit 5ea51731d150f7ddc4a365437931cd8be3bf3131Author: Alex Lee &lt;alexlee@example.com&gt;Date:   Tue Jul 22 15:39:12 2014 -0400    Bug #14 - Fixed spacing on titlecommit a13b85e984171c6e2a1729bb061994525f626d14Author: Aki Rose &lt;akirose@example.com&gt;Date:   Tue Jul 21 01:12:48 2014 -0400    First commit\n\n让我们用提交hash(commit hash)标记bug (e3851e8 for #21, 5ea5173 for #14).\n首先, 我们把master分支重置到正确的提交(a13b85e):\n(master)$ git reset --hard a13b85eHEAD is now at a13b85e\n\n现在, 我们对 bug #21 创建一个新的分支:\n(master)$ git checkout -b 21(21)$\n\n接着, 我们用 cherry-pick 把对bug #21的提交放入当前分支。 这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。\n(21)$ git cherry-pick e3851e8\n\n这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 冲突节 解决冲突.\n再者， 我们为bug #14 创建一个新的分支, 也基于master分支\n(21)$ git checkout master(master)$ git checkout -b 14(14)$\n\n最后, 为 bug #14 执行 cherry-pick:\n(14)$ git cherry-pick 5ea5173\n\n\n我想删除上游(upstream)分支被删除了的本地分支一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。 如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。\n$ git fetch -p\n\n\n我不小心删除了我的分支如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。 让我们先创建一个分支和一个新的文件:\n(master)$ git checkout -b my-branch(my-branch)$ git branch(my-branch)$ touch foo.txt(my-branch)$ lsREADME.md foo.txt\n\n添加文件并做一次提交\n(my-branch)$ git add .(my-branch)$ git commit -m &#x27;foo.txt added&#x27;(my-branch)$ foo.txt added 1 files changed, 1 insertions(+) create mode 100644 foo.txt(my-branch)$ git logcommit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012Author: siemiatj &lt;siemiatj@example.com&gt;Date:   Wed Jul 30 00:34:10 2014 +0200    foo.txt addedcommit 69204cdf0acbab201619d95ad8295928e7f411d5Author: Kate Hudson &lt;katehudson@example.com&gt;Date:   Tue Jul 29 13:14:46 2014 -0400    Fixes #6: Force pushing after amending commits\n\n现在我们切回到主(master)分支，‘不小心的’删除my-branch分支\n(my-branch)$ git checkout masterSwitched to branch &#x27;master&#x27;Your branch is up-to-date with &#x27;origin/master&#x27;.(master)$ git branch -D my-branchDeleted branch my-branch (was 4e3cd85).(master)$ echo oh noes, deleted my branch!oh noes, deleted my branch!\n\n在这时候你应该想起了reflog, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。\n(master)$ git reflog69204cd HEAD@&#123;0&#125;: checkout: moving from my-branch to master4e3cd85 HEAD@&#123;1&#125;: commit: foo.txt added69204cd HEAD@&#123;2&#125;: checkout: moving from master to my-branch\n\n正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。\n(master)$ git checkout -b my-branch-helpSwitched to a new branch &#x27;my-branch-help&#x27;(my-branch-help)$ git reset --hard 4e3cd85HEAD is now at 4e3cd85 foo.txt added(my-branch-help)$ lsREADME.md foo.txt\n\n看! 我们把删除的文件找回来了。 Git的 reflog 在rebasing出错的时候也是同样有用的。\n\n我想删除一个分支删除一个远程分支:\n(master)$ git push origin --delete my-branch\n\n你也可以:\n(master)$ git push origin :my-branch\n\n删除一个本地分支:\n(master)$ git branch -D my-branch\n\n\n我想从别人正在工作的远程分支签出(checkout)一个分支首先, 从远程拉取(fetch) 所有分支:\n(master)$ git fetch --all\n\n假设你想要从远程的daves分支签出到本地的daves\n(master)$ git checkout --track origin/davesBranch daves set up to track remote branch daves from origin.Switched to a new branch &#x27;daves&#x27;\n\n(--track 是 git checkout -b [branch] [remotename]/[branch] 的简写)\n这样就得到了一个daves分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.\nRebasing 和合并(Merging)\n我想撤销rebase/merge你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。 Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。\n(my-branch)$ git reset --hard ORIG_HEAD\n\n\n我已经rebase过, 但是我不想强推(force push)不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。 是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:\n(master)$ git checkout my-branch(my-branch)$ git rebase -i master(my-branch)$ git checkout master(master)$ git merge --ff-only my-branch\n\n更多, 参见 this SO thread.\n\n我需要组合(combine)几个提交(commit)假设你的工作分支将会做对于 master 的pull-request。 一般情况下你不关心提交(commit)的时间戳，只想组合 所有 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。 确保主(master)分支是最新的和你的变化都已经提交了, 然后:\n(my-branch)$ git reset --soft master(my-branch)$ git commit -am &quot;New awesome feature&quot;\n\n如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):\n(my-branch)$ git rebase -i master\n\n如果没有相对的其它分支， 你将不得不相对自己的HEAD 进行 rebase。 例如：你想组合最近的两次提交(commit), 你将相对于HEAD~2 进行rebase， 组合最近3次提交(commit), 相对于HEAD~3, 等等。\n(master)$ git rebase -i HEAD~2\n\n在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:\npick a9c8a1d Some refactoringpick 01b2fd8 New awesome featurepick b729ad5 fixuppick e3851e8 another fix# Rebase 8074d12..b729ad5 onto 8074d12## Commands:#  p, pick = use commit#  r, reword = use commit, but edit the commit message#  e, edit = use commit, but stop for amending#  s, squash = use commit, but meld into previous commit#  f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message#  x, exec = run command (the rest of the line) using shell## These lines can be re-ordered; they are executed from top to bottom.## If you remove a line here THAT COMMIT WILL BE LOST.## However, if you remove everything, the rebase will be aborted.## Note that empty commits are commented out\n\n所有以 # 开头的行都是注释, 不会影响 rebase.\n然后，你可以用任何上面命令列表的命令替换 pick, 你也可以通过删除对应的行来删除一个提交(commit)。\n例如, 如果你想 单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 f:\npick a9c8a1d Some refactoringpick 01b2fd8 New awesome featuref b729ad5 fixupf e3851e8 another fix\n\n如果你想组合这些提交(commit) 并重命名这个提交(commit), 你应该在第二个提交(commit)旁边添加一个r，或者更简单的用s 替代 f:\npick a9c8a1d Some refactoringpick 01b2fd8 New awesome features b729ad5 fixups e3851e8 another fix\n\n你可以在接下来弹出的文本提示框里重命名提交(commit)。\nNewer, awesomer features# Please enter the commit message for your changes. Lines starting# with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.# rebase in progress; onto 8074d12# You are currently editing a commit while rebasing branch &#x27;master&#x27; on &#x27;8074d12&#x27;.## Changes to be committed:#\tmodified:   README.md#\n\n如果成功了, 你应该看到类似下面的内容:\n(master)$ Successfully rebased and updated refs/heads/master.\n\n安全合并(merging)策略--no-commit 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。 no-ff 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致。\n(master)$ git merge --no-ff --no-commit my-branch\n\n我需要将一个分支合并成一个提交(commit)(master)$ git merge --squash my-branch\n\n\n我只想组合(combine)未推的提交(unpushed commit)有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。\n(master)$ git rebase -i @&#123;u&#125;\n\n这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。\n\n检查是否分支上的所有提交(commit)都合并(merge)过了检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:\n(master)$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll\n\n这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。 另一个做法可以是:\n(master)$ git log master ^feature/120-on-scroll --no-merges\n\n交互式rebase(interactive rebase)可能出现的问题\n这个rebase 编辑屏幕出现’noop’如果你看到的是这样:\nnoop\n\n这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 领先(ahead) 当前分支。 你可以尝试:\n\n检查确保主(master)分支没有问题\nrebase  HEAD~2 或者更早\n\n\n有冲突的情况如果你不能成功的完成rebase, 你可能必须要解决冲突。\n首先执行 git status 找出哪些文件有冲突:\n(my-branch)$ git statusOn branch my-branchChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\tmodified:   README.md\n\n在这个例子里面, README.md 有冲突。 打开这个文件找到类似下面的内容:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADsome code=========some code&gt;&gt;&gt;&gt;&gt;&gt;&gt; new-commit\n\n你需要解决新提交的代码(示例里, 从中间==线到new-commit的地方)与HEAD 之间不一样的地方.\n有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):\n(master*)$ git mergetool -t opendiff\n\n在你解决完所有冲突和测试过后, git add 变化了的(changed)文件, 然后用git rebase --continue 继续rebase。\n(my-branch)$ git add README.md(my-branch)$ git rebase --continue\n\n如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行git rebase --skip。\n任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:\n(my-branch)$ git rebase --abort\n\n\n杂项(Miscellaneous Objects)\n克隆所有子模块$ git clone --recursive git://github.com/foo/bar.git\n\n如果已经克隆了:\n$ git submodule update --init --recursive\n\n\n删除标签(tag)$ git tag -d &lt;tag_name&gt;$ git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt;\n\n\n恢复已删除标签(tag)如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):\n$ git fsck --unreachable | grep tag\n\n记下这个标签(tag)的hash，然后用Git的 update-ref:\n$ git update-ref refs/tags/&lt;tag_name&gt; &lt;hash&gt;\n\n这时你的标签(tag)应该已经恢复了。\n\n已删除补丁(patch)如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 git am。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。\n做完提交后, 再修改作者，参见变更作者。 然后, 应用变化, 再发起一个新的pull request。\n跟踪文件(Tracking Files)\n我只想改变一个文件名字的大小写，而不修改内容(master)$ git mv --force myfile MyFile\n\n\n我想从Git删除一个文件，但保留该文件(master)$ git rm --cached log.txt\n\n配置(Configuration)\n我想给一些Git命令添加别名(alias)在 OS X 和 Linux 下, 你的 Git的配置文件储存在 ~/.gitconfig。我在[alias] 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:\n[alias]    a = add    amend = commit --amend    c = commit    ca = commit --amend    ci = commit -a    co = checkout    d = diff    dc = diff --changed    ds = diff --staged    f = fetch    loll = log --graph --decorate --pretty=oneline --abbrev-commit    m = merge    one = log --pretty=oneline    outstanding = rebase -i @&#123;u&#125;    s = status    unpushed = log @&#123;u&#125;    wc = whatchanged    wip = rebase -i @&#123;u&#125;    zap = fetch -p\n\n\n我想缓存一个仓库(repository)的用户名和密码你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。\n$ git config --global credential.helper cache# Set git to use the credential memory cache\n\n$ git config --global credential.helper &#x27;cache --timeout=3600&#x27;# Set the cache to timeout after 1 hour (setting is in seconds)\n\n\n我不知道我做错了些什么你把事情搞砸了：你 重置(reset) 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。\n这就是 git reflog 的目的， reflog 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到reflog。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。\n(master)$ git reflog0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~20254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to masterc10f740 HEAD@&#123;2&#125;: checkout: moving from master to 2.2\n\n上面的reflog展示了从master分支签出(checkout)到2.2 分支，然后再签回。 那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 HEAD@&#123;0&#125;标识.\n如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前master上指向的提交(0254ea7)。\n$ git reset --hard 0254ea7\n\n然后使用git reset就可以把master改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。\n(摘自).\n其它资源(Other Resources)书(Books)\nPro Git - Scott Chacon’s excellent git book\nGit Internals - Scott Chacon’s other excellent git book\n\n教程(Tutorials)\nLearn Git branching 一个基于网页的交互式 branching/merging/rebasing 教程\nGetting solid at Git rebase vs. merge\ngit-workflow - Aaron Meurer的怎么使用Git为开源仓库贡献\nGitHub as a workflow - 使用GitHub做为工作流的趣事, 尤其是空PRs\n\n脚本和工具(Scripts and Tools)\nfirstaidgit.io 一个可搜索的最常被问到的Git的问题\ngit-extra-commands - 一堆有用的额外的Git脚本\ngit-extras - GIT 工具集 – repo summary, repl, changelog population, author commit percentages and more\ngit-fire - git-fire 是一个 Git 插件，用于帮助在紧急情况下添加所有当前文件, 做提交(committing), 和推(push)到一个新分支(阻止合并冲突)。\ngit-tips - Git小提示\ngit-town - 通用，高级Git工作流支持！ http://www.git-town.com\n\nGUI客户端(GUI Clients)\nGitKraken - 豪华的Git客户端 Windows, Mac &amp; Linux\ngit-cola - 另外一个Git客户端 Windows &amp; OS X\nGitUp - 一个新的Git客户端，在处理Git的复杂性上有自己的特点\ngitx-dev - 图形化的Git客户端 OS X\nSource Tree - 免费的图形化Git客户端 Windows &amp; OS X\nTower - 图形化Git客户端 OS X(付费)\n\n转自： https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md#%E7%BC%96%E8%BE%91%E6%8F%90%E4%BA%A4editting-commits\n","categories":["Git"],"tags":["Git"]},{"title":"Homebrew更新资源缓慢","url":"/2021/03/11/Homebrew%E6%9B%B4%E6%96%B0%E8%B5%84%E6%BA%90%E7%BC%93%E6%85%A2/","content":"　　很久没有写Blog了最近想起来再搞搞记录下生活记录下工作中碰到的事情，时间过去很久发现pull仓库里的github-page竟然很多依赖都需要更新，能怎么办呢，先得更新一波啊不然一大堆报错，或者就是本地无法运行起来。首先Homebrew就得更新，发现超级慢，就算连了vpn也依旧很慢。尝试了几条解决方案都不能够提上下载速度，最后在简书上发现一个解决的方案，亲测有效：\n手动执行下面这句命令，更换为中科院的镜像：git clone git://mirrors.ustc.edu.cn/homebrew-core.git/ /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core --depth=1\n\n复制代码然后把homebrew-core的镜像地址也设为中科院的国内镜像cd &quot;$(brew --repo)&quot;\n\ngit remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n\ncd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;\n\ngit remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n\n然后执行brew update\n","categories":["解决方案"],"tags":["解决方案"]},{"title":"Git常用命令","url":"/2021/03/16/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"一. 新建代码库# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]\n\n二.配置# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]\n\n三.配置Git的设置文件为.gitconfig，它可以在用户主目录下(全局配置)，也可以在项目目录下(项目配置)\n# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]\n\n四. 增加/删除文件# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]\n\n五. 代码提交# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 将add和commit合为一步$ git commit -am &#x27;message&#x27;# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...\n\n六. 分支# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]# 检出版本v2.0$ git checkout v2.0# 从远程分支develop创建新本地分支devel并检出$ git checkout -b devel origin/develop# 检出head版本的README文件（可用于修改错误回退）git checkout -- README                         \n\n七. 标签# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]\n\n八. 查看信息# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog\n\n九. 远程同步# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all\n\n十. 撤销# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop\n\n十一. 其他git init                                                  # 初始化本地git仓库（创建新仓库）git config --global user.name &quot;xxx&quot;                       # 配置用户名git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件git config --global color.ui true                         # git status等命令自动着色git config --global color.status autogit config --global color.diff autogit config --global color.branch autogit config --global color.interactive autogit config --global --unset http.proxy                    # remove  proxy configuration on gitgit clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库git status                                                # 查看当前版本状态（是否修改）git add xyz                                               # 添加xyz文件至indexgit add .                                                 # 增加当前子目录下所有更改过的文件至indexgit commit -m &#x27;xxx&#x27;                                       # 提交git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改）git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步git rm xxx                                                # 删除index中的文件git rm -r *                                               # 递归删除git log                                                   # 显示提交日志git log -1                                                # 显示1行日志 -n为n行git log -5git log --stat                                            # 显示提交日志及相关变动文件git log -p -mgit show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容git show dfb02                                            # 可只用commitid的前几位git show HEAD                                             # 显示HEAD提交日志git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本git tag                                                   # 显示已存在的taggit tag -a v2.0 -m &#x27;xxx&#x27;                                  # 增加v2.0的taggit show v2.0                                             # 显示v2.0的日志及详细内容git log v2.0                                              # 显示v2.0的日志git diff                                                  # 显示所有未添加至index的变更git diff --cached                                         # 显示所有已添加index但还未commit的变更git diff HEAD^                                            # 比较与上一个版本的差异git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）git branch                                                # 显示本地分支git branch --contains 50089                               # 显示包含提交50089的分支git branch -a                                             # 显示所有分支git branch -r                                             # 显示所有原创分支git branch --merged                                       # 显示所有已合并到当前分支的分支git branch --no-merged                                    # 显示所有未合并到当前分支的分支git branch -m master master_copy                          # 本地分支改名git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出git checkout -b master master_copy                        # 上面的完整版git checkout features/performance                         # 检出已存在的features/performance分支git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支git checkout v2.0                                         # 检出版本v2.0git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）git merge origin/master                                   # 合并远程master分支至当前分支git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改git push origin master                                    # 将当前分支push到远程master分支git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支git push --tags                                           # 把所有tag推送到远程仓库git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支git pull origin master                                    # 获取远程分支master并merge到当前分支git mv README README2                                     # 重命名文件README为README2git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）git rebasegit branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933git ls-files                                              # 列出git index包含的文件git show-branch                                           # 图示当前分支历史git show-branch --all                                     # 图示所有分支历史git whatchanged                                           # 显示提交历史对应的文件修改git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818git ls-tree HEAD                                          # 内部命令：显示某个git对象git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASHgit reflog                                                # 显示所有提交，包括孤立节点git show HEAD@&#123;5&#125;git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态git log --pretty=format:&#x27;%h %s&#x27; --graph                   # 图示提交日志git show HEAD~3git show -s --pretty=raw 2be7fcb476git stash                                                 # 暂存当前修改，将所有至为HEAD状态git stash list                                            # 查看所有暂存git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”git grep -e &#x27;#define&#x27; --and -e SORT_DIRENTgit gcgit fsck# 生成一个可供发布的压缩包$ git archive\n\n转自： https://mp.weixin.qq.com/s/ANVNo56c0FEDfvosmzMrqQ\n","categories":["Git"],"tags":["Git"]},{"title":"Vue.js结合百度地图3.0离线开发","url":"/2021/03/16/Vue.js%E7%BB%93%E5%90%88%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE3.0%E7%A6%BB%E7%BA%BF%E5%BC%80%E5%8F%91/","content":"vue+百度地图 api 如何在内网环境中开发呢？大致思路就是把所有资源都下载到本地，通过加载本地资源来展示，前期准备：\n\n申请百度地图 ak\n下载地图离线瓦片\n\n下面介绍具体步骤\n申请百度地图 ak申请地址账号密码登陆后在这个页面点击控制台然后在左侧菜单栏上点击我的应用并创建应用，创建完成后会生成一个访问应用(ak)接下来修改百度地图的 JS 文件\n修改百度地图 v3.0 js 文件\n第一步在浏览起立输入http://api.map.baidu.com/api?v=3.0&amp;ak=这里填写刚才你申请的ak码。\n\n回车后会在浏览器里看见一段代码:,找到这串代码中src=&quot;&quot;中的部分，复制进浏览器地址栏并回车，这时候会看到一个压缩后的 js 把它另存为一下取名为 baidu-api.js。\n\n用编辑器打开 baidu-api.js，首先代码格式化一下。\n\n这一步就是重点了:\n\ncontrol+f 搜索如下代码var c = (1e5 * Math.random()).toFixed(0)，找到类似的代码块（因为 ak 码不一样所以下载的 js 文件里面的变量名也不一样。）在红框处添加:\nif (/^http/.test(a)) return //修改  屏蔽ak验证，若调用外部资源直接返回\n\n这段代码屏蔽 ak 验证。\n\ncontrol+f 搜索如下代码 url.domain.main_domain_cdn.other[0]，找到类似的代码块，注释掉原来的添加以下代码：\nD.pa = bmapcfg.home\n\nbmapcfg.home是下面一个 js 里面的变量。注意代码不要照抄，要根据你的 js 文件来复制，D.pa是我 js 里面的变量名这个不是固定的，不同 ak 码会生成不同的 js 文件。\n\ncontrol+f 搜索&amp;mod=，定位到如下代码，如截图所示修改修改原来的代码\nif (a.length &gt; 0) &#123;  for (i = 0; i &lt; a.length; i++) &#123;    mf = bmapcfg.home + &quot;modules/&quot; + a[i] + &quot;.js&quot;    qa(mf)  &#125;&#125; else &#123;  f.WK()&#125;\ncontrol+f 搜索panoramaflash，找到如截图所示代码块，这些就是我们离线要用到的 js 模块，需要我们手动下载下来，下载方法就是在浏览器里输入http://api.map.baidu.com/getmodules?v=3.0&amp;mod=key_value这个 key 加 value 的形式，比如截图中第一个就是http://api.map.baidu.com/getmodules?v=3.0&amp;mod=map_0zz35j，把这些文件全部下载下来后，在根目录下新建一个 modules 文件夹，然后把这些 js 文件通通放进去。到这里所有修改 baidu-api.js 的操作已经结束了。\n\n\n\n接下来我们在根目录下新建一个 map_load.js 作为入口文件，里面代码是这样的\nvar bmapcfg = &#123;  imgext: &quot;.png&quot;, //瓦片图的后缀  根据需要修改，一般是 .png .jpg  tiles_dir: &quot;&quot;, //普通瓦片图的地址，为空默认在tiles/ 目录&#125;var scripts = document.getElementsByTagName(&quot;script&quot;)var JS__FILE__ = scripts[scripts.length - 1].getAttribute(&quot;src&quot;) //获得当前js文件路径bmapcfg.home = JS__FILE__.substr(0, JS__FILE__.lastIndexOf(&quot;/&quot;) + 1) //地图API主目录;(function () &#123;  window.BMap_loadScriptTime = new Date().getTime()  //加载地图API主文件  document.write(    &#x27;&lt;script type=&quot;text/javascript&quot; src=&quot;&#x27; +      bmapcfg.home +      &#x27;baidu-api.js&quot;&gt;&lt;/script&gt;&#x27;  )&#125;)()\n\n这个 js 文件中的代码就是定义了文件读取路径。\n\n下载地图瓦片，这是一个很烦的过程，需要付费购买瓦片下载程序，这个我就不多介绍了，附上本人现在使用的瓦片文件，一共 1-17 级，如果离线地图出现无法正常显示的正方形区域，说明缺少当前瓦片。瓦片链接，密码: alo0\n\n\n根目录结构如果有问题可以留言讨论\n","categories":["vue","solution"],"tags":["vue","solution"]},{"title":"Nuxt3 避坑指南","url":"/2024/09/29/Nuxt3-%E9%81%BF%E5%9D%91/","content":"Nuxt3 常见问题及解决方案Nuxt3 作为一个强大的 Vue3 框架,为开发者提供了许多便利。然而,在使用过程中,我们可能会遇到一些”坑”。本文将列举一些常见问题及其解决方法,希望能帮助大家更顺畅地使用 Nuxt3 进行开发。\n1. 路由问题问题: 动态路由不生效有时候,我们按照文档设置的动态路由可能不会正常工作。\n解决方案:\n\n确保你的文件名格式正确,例如 [id].vue\n检查 nuxt.config.ts 中是否正确配置了路由\n尝试重启 Nuxt 开发服务器\n\n2. 状态管理问题: Pinia 存储在服务器端渲染(SSR)中不持久化解决方案:\n\n使用 nuxt-pinia 插件\n在 nuxt.config.ts 中正确配置 Pinia\n考虑使用 useAsyncData 或 useFetch 来预取数据\n\n3. 组件问题问题: 自动导入的组件在某些情况下不工作解决方案:\n\n检查组件名称是否符合自动导入的命名规则\n尝试手动导入组件\n重新运行 npm run dev 以重新生成组件缓存\n\n4. 样式问题问题: 全局样式不生效解决方案:\n\n确保在 nuxt.config.ts 中正确配置了全局样式文件\n检查样式文件的路径是否正确\n考虑使用 @nuxtjs/style-resources 模块\n\n5. 构建和部署问题问题: 生产环境构建失败解决方案:\n\n检查所有依赖项是否兼容 Nuxt3\n尝试清除 .nuxt 和 node_modules/.vite 目录,然后重新安装依赖\n查看 Nuxt3 的最新文档,确保你的配置与最新版本兼容\n\n结论Nuxt3 虽然强大,但在使用过程中难免会遇到一些问题。希望这个列表能帮助你解决一些常见的”坑”。记住,Nuxt3 仍在积极开发中,经常查看官方文档和社区讨论可以帮助你及时了解最新的最佳实践和解决方案。\n如果你遇到了其他问题或有好的解决方案,欢迎在评论中分享!\n","tags":["JavaScript","Nuxt3","Vue3","Web开发"]},{"title":"关于前端开发转管理岗位","url":"/2025/04/09/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%BD%AC%E7%AE%A1%E7%90%86%E5%B2%97%E4%BD%8D/","content":"🧠 一、管理岗位核心能力\n团队管理与领导力 •    如何激励团队成员 •    如何进行绩效评估与反馈 •    如何设定目标并追踪执行 •    如何处理冲突与沟通障碍 •    如何招聘、培养人才\n\n项目管理 •    熟悉敏捷开发（Scrum、Kanban） •    学会使用项目管理工具（Jira、Trello、Notion） •    制定项目计划、分配任务、控制进度与质量 •    风险管理与应对方案\n\n跨部门沟通能力 •    与产品、设计、后端、测试等协作 •    向上级汇报进展、问题、需求 •    将技术问题用业务语言阐述，推动决策\n\n\n📚 二、技术管理相关知识\n架构能力提升 •    理解前后端整体架构设计 •    微前端、模块化、可维护性设计 •    性能优化、安全策略\n\n代码质量控制 •    Code Review 的规范与技巧 •    制定团队的编码规范 •    自动化测试与CI/CD 流程\n\n技术选型与决策 •    如何评估新技术栈是否适合团队 •    平衡技术先进性与稳定性\n\n\n📈 三、业务理解能力管理者不能只懂技术，还要懂 业务，要学习：    •    产品需求背后的商业逻辑    •    如何用数据衡量产品和技术成果（如转化率、留存率、响应时间等）\n🧰 四、可推荐学习路径方向    推荐内容书籍    《高效能程序员的管理之道》《技术领导力手册》《Scrum敏捷项目管理》《OKR工作法》视频/课程    极客时间《技术管理实战36讲》李运华《技术领导力》Udemy/LinkedIn Learning 的项目管理与领导力课程工具    Jira、Notion、Slack、GitHub Projects、TAPD实践建议    主动承担项目推进、Code Review、Mentor 初级成员、参与招聘\n\n\n\n方向\n推荐内容\n\n\n\n书籍\n高效能程序员的管理之道》《技术领导力手册》《Scrum敏捷项目管理》《OKR工作法》\n\n\n视频/课程\n极客时间《技术管理实战36讲》李运华《技术领导力》Udemy/LinkedIn Learning 的项目管理与领导力课程\n\n\n工具\nJira、Notion、Slack、GitHub Projects、TAPD\n\n\n实践建议\n主动承担项目推进、Code Review、Mentor 初级成员、参与招聘\n\n\n"},{"title":"有趣的前端开发库","url":"/2024/11/28/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BA%93/","content":"Vivus使用 Vivus 创建令人惊叹的动画 SVG 绘图。这个轻量级的 JavaScript 库允许您通过模拟绘制过程来制作 SVG 的动画，为您的图形添加独特的触感。https://maxwellito.github.io/vivus\nSwiperSwiper 是一款免费且功能强大的工具，用于制作触摸滑块和轮播。它提供平滑的过渡并在不同的屏幕尺寸上运行良好，非常适合适合移动设备的项目。https://swiperjs.com\nDay.jsDay.js 是一个简单快速的库，非常适合需要处理日期而不使用太多空间或减慢速度的项目。https://day.js.org\nTippy.js一个轻量级、可扩展的库，用于创建美观、高度可定制的工具提示、弹出框、下拉列表等。https://atomiks.github.io/tippyjs\nLottie by Airbnb它可用于将高质量动画集成到 Web 应用程序中。https://lottiefiles.com/free-animations/airbnb\nAnimate.css您可以使用 Animate.css 快速将预先设计的动画添加到您的 Web 元素中。https://animate.style\nFullCalendarFullCalendar 提供直观、功能齐全的日历界面，具有可自定义的事件管理、拖放和时间线视图。https://fullcalendar.io\nFloating UI使用浮动 UI 轻松管理复杂的 UI 组件，例如工具提示、下拉列表和弹出窗口。https://floating-ui.com\nSortableJS使用 SortableJS 轻松启用列表的拖放排序。它的灵活性使其成为构建交互式 UI（如看板）的理想选择。https://sortablejs.github.io/Sortable\nSweetAlert2SweetAlert2 提供响应迅速、完全可定制的警报框，可无缝集成到您的项目中。https://sweetalert2.github.io\nChart.jsChart.js 可以轻松创建各种图表类型，包括折线图、条形图、雷达图和圆环图，所有这些都只需最少的配置。https://www.chartjs.org\nAOS (Animate on Scroll)AOS 是一个轻量级且高度可定制的库，可在您滚动浏览网页时添加引人注目的动画。https://michalsnik.github.io/aos\n","tags":["JavaScript","Web开发"]}]